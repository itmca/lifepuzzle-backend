plugins {
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java'
    id 'checkstyle'
}

group = 'io.itmca'
version = '2022.09'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // AWS
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.25.6'

    // Data
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'mysql:mysql-connector-java'

    //	Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Tool
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation 'org.json:json:20220924'
    implementation 'org.springframework.boot:spring-boot-starter-mail:2.7.4'
    implementation 'io.github.techgnious:IVCompressor:2.0.2'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
}

tasks.named('test') {
    useJUnitPlatform()
}

processResources {
    duplicatesStrategy = org.gradle.api.file.DuplicatesStrategy.INCLUDE
}
task buildZip(type: Zip) {
    from(bootJar.outputs.files) {
        into "."
    }
    destinationDirectory = project.buildDir
    archiveFileName = project.name + ".zip"
}

checkstyle {
    toolVersion('10.10.0')
    configFile = rootProject.file('checkstyle/checkstyle.xml')
    maxWarnings = 0
}
