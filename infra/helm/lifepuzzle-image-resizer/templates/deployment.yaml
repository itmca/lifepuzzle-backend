apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "lifepuzzle-image-resizer.fullname" . }}
  labels:
    {{- include "lifepuzzle-image-resizer.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "lifepuzzle-image-resizer.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "lifepuzzle-image-resizer.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "lifepuzzle-image-resizer.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            # Database configuration
            - name: DB_HOST
              value: {{ .Values.env.DB_HOST | quote }}
            - name: DB_PORT
              value: {{ .Values.env.DB_PORT | quote }}
            - name: DB_NAME
              value: {{ .Values.env.DB_NAME | quote }}
            - name: DB_USER
              value: {{ .Values.env.DB_USER | quote }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "lifepuzzle-image-resizer.fullname" . }}-secrets
                  key: db-password
            
            # RabbitMQ configuration
            - name: RABBITMQ_HOST
              value: {{ .Values.env.RABBITMQ_HOST | quote }}
            - name: RABBITMQ_PORT
              value: {{ .Values.env.RABBITMQ_PORT | quote }}
            - name: RABBITMQ_USER
              value: {{ .Values.env.RABBITMQ_USER | quote }}
            - name: RABBITMQ_VHOST
              value: {{ .Values.env.RABBITMQ_VHOST | quote }}
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "lifepuzzle-image-resizer.fullname" . }}-secrets
                  key: rabbitmq-password
            
            # Application configuration
            - name: PORT
              value: {{ .Values.env.PORT | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.env.LOG_LEVEL | quote }}
            - name: WORKER_COUNT
              value: {{ .Values.env.WORKER_COUNT | quote }}
            - name: QUEUE_NAME
              value: {{ .Values.env.QUEUE_NAME | quote }}
            
            # AWS S3 configuration
            - name: AWS_REGION
              value: {{ .Values.env.AWS_REGION | quote }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "lifepuzzle-image-resizer.fullname" . }}-secrets
                  key: aws-access-key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "lifepuzzle-image-resizer.fullname" . }}-secrets
                  key: aws-secret-key
            - name: S3_BUCKET_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "lifepuzzle-image-resizer.fullname" . }}-secrets
                  key: aws-s3-bucket
          
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            successThreshold: {{ .Values.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          {{- end }}
          
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}